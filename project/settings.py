"""
Django settings for project project.

Generated by 'django-admin startproject' using Django 4.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""
import datetime
import os

from django.urls import reverse_lazy
from environ import Env
from django.utils.translation import gettext_lazy as _

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# django-environ allows you to use Twelve-factor methodology
# to configure your Django application with environment variables.
env = Env(DEBUG=(bool, False), SSL_REDIRECT=(bool, False))
Env.read_env(os.path.join(BASE_DIR, '.env'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env('DEBUG')

#to test send marketing messages by email
TESTING_EMAIL_MODE=True
# This mail is used to send all error messages that occur in the system when DEBUG is False
ADMINS = [(env("ADMIN_NAME"), env("ADMIN_EMAIL"))]

ALLOWED_HOSTS = ['*']

# Application definition
SITE_DOMAIN = 'https://care-app.live'
INSTALLED_APPS = [
    'modeltranslation',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.sites',
    'django.contrib.staticfiles',
    'django.contrib.humanize',

    'django_celery_beat',
    'django_celery_results',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'rest_framework',
    'django_filters',
    'django_countries',
    'corsheaders',
    'phonenumber_field',
    'notifications',
    'mptt',
    'taggit',
    'storages',
    'tz_detect',
    'rosetta',
    'tinymce',
    'sort_order_field',
    'qr_code',

    'authapp.apps.AuthappConfig',
    'vendorapp.apps.VendorappConfig',
    'customerapp.apps.CustomerappConfig',
    'adminapp.apps.AdminappConfig',
    'django_cleanup.apps.CleanupConfig',
]

SITE_ID = 1

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'utils.middleware.LocaleMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'authapp.middleware.TimezoneMiddleware',
]

ROOT_URLCONF = 'project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates'), ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'project.wsgi.application'

# A Django App that adds Cross-Origin Resource Sharing (CORS) headers to responses.
# This allows in-browser requests to your Django application from other origins.
CORS_ORIGIN_ALLOW_ALL = True

# Django SECURE SSL configuration for handle HTTPs protocol.
# Redirect urls that open from http protocol
SSL_REDIRECT = env('SSL_REDIRECT')
if SSL_REDIRECT:
    # This if control check is SECURE SSL is activated or not.
    # If SECURE SSL is activated all http was redirected to https
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
    SECURE_SSL_REDIRECT = True

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

# DATABASES = {
#     "default": {
#         "ENGINE": env.str("SQL_ENGINE", default="django.db.backends.sqlite3"),
#         "NAME": env.str("SQL_DATABASE", default=os.path.join(BASE_DIR, "db.sqlite3")),
#         "USER": env.str("SQL_USER", default=""),
#         "PASSWORD": env.str("SQL_PASSWORD", default=""),
#         "HOST": env.str("SQL_HOST", default=""),
#         "PORT": env.str("SQL_PORT", default=""),
#     }
# }

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Customizing authentication in Django
# https://docs.djangoproject.com/en/2.2/topics/auth/customizing/

AUTHENTICATION_BACKENDS = (
    'authapp.backends.AuthenticationBackend',
)

AUTH_USER_MODEL = "authapp.User"

LOGIN_URL = reverse_lazy("authapp:login_view")
LOGIN_REDIRECT_URL = reverse_lazy("redirect_authenticated_user_view")
LOGOUT_URL = reverse_lazy("authapp:logout_view")
LOGOUT_REDIRECT_URL = LOGIN_URL

# https://www.django-rest-framework.org/
# Django REST framework is a powerful and flexible toolkit for building Web APIs.
# The Web browsable API is a huge usability win for your developers.

PAGINATION_PAGE_SIZE = 100

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_jwt.authentication.JSONWebTokenAuthentication',
        'authapp.authentication.SessionAuthentication',
    ],

    'SEARCH_PARAM': 'search[value]',
    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'],

    'DEFAULT_PAGINATION_CLASS': 'utils.pagination.CustomPagination',
    'PAGE_SIZE': PAGINATION_PAGE_SIZE
}

JWT_AUTH = {
    'JWT_EXPIRATION_DELTA': datetime.timedelta(days=365),
    'JWT_ALLOW_REFRESH': True,
}

APPEND_SLASH = False

# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Integrated set of Django applications addressing authentication, registration,
# account management as well as 3rd party (social) account authentication.
# allauth Configuration
# https://django-allauth.readthedocs.io/en/latest/index.html

ACCOUNT_FIRST_NAME_REQUIRED = True
ACCOUNT_LAST_NAME_REQUIRED = True
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_PHONE_REQUIRED = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_EMAIL_MAX_LENGTH = 255
ACCOUNT_USERNAME_MAX_LENGTH = 150
ACCOUNT_USERNAME_MIN_LENGTH = 5
ACCOUNT_PASSWORD_MAX_LENGTH = 150
ACCOUNT_PASSWORD_MIN_LENGTH = 4
ACCOUNT_CODE_MAX_LENGTH = 10
ACCOUNT_CODE_MIN_LENGTH = 5
ACCOUNT_EMAIL_VERIFICATION = "none"
ACCOUNT_AUTHENTICATION_METHOD = "username_email"
LOGIN_ATTEMPTS_LIMIT = 5

# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGES = (
    ('ar', _('العربية')),
    ('en', _('English')),
)

LANGUAGE_CODE = 'ar'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

prefix_default_language = True

LOCALE_PATHS = [os.path.join(BASE_DIR, 'locale')]

DATA_UPLOAD_MAX_NUMBER_FIELDS = 10240

# django-celery-results - Using the Django ORM/Cache as a result backend
# The django-celery-results extension provides result backends using
# either the Django ORM, or the Django Cache framework.
CELERY_BACKEND = 'redis://localhost:6379/3'
CELERY_BROKER_URL = 'redis://localhost:6379/4'
CELERY_RESULT_BACKEND = 'redis://localhost:6379/5'
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_ENABLE_UTC = True
# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

# Static files (CSS, JavaScript, Images) and Media Files
# https://docs.djangoproject.com/en/3.2/howto/static-files/
# https://overiq.com/django-1-10/handling-media-files-in-django/
# https://docs.djangoproject.com/en/2.2/topics/files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# django-notifications is a GitHub notification alike app for Django,
# it was derived from django-activity-stream
DJANGO_NOTIFICATIONS_CONFIG = {'USE_JSONFIELD': True, 'SOFT_DELETE': True}

# Resizes image origin to specified size. Compatible with sorl-thumbnail.
# Configuration Resizes image
DJANGORESIZED_DEFAULT_FORMAT_EXTENSIONS = {
    'PNG': ".png",
    'JPG': ".jpg",
    'JPEG': ".jpg"
}

DEFAULT_IMAGE = STATIC_URL + 'care/assets/images/users/default.png'

# Although Python provides a mail sending interface via the smtplib module,
# Django provides a couple of light wrappers over it.
# https://docs.djangoproject.com/en/4.0/topics/email/
EMAIL_BACKEND = env.str('EMAIL_BACKEND', default='django.core.mail.backends.smtp.EmailBackend')
EMAIL_HOST = env('EMAIL_HOST')
EMAIL_PORT = env.int('EMAIL_PORT', default=587)
EMAIL_USE_TLS = env.bool('EMAIL_USE_TLS', default=True)
EMAIL_HOST_USER = env('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = env('EMAIL_HOST_PASSWORD')
DEFAULT_FROM_EMAIL = env('DEFAULT_FROM_EMAIL')

# Email configuration for Amazon SES
# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# EMAIL_HOST = env('EMAIL_HOST_AWS')
# EMAIL_PORT = 587
# EMAIL_USE_TLS = True
# EMAIL_HOST_USER = env('EMAIL_HOST_USER')  # Replace with your Access Key ID
# EMAIL_HOST_PASSWORD = env('EMAIL_HOST_PASSWORD')  # Replace with your Secret Access Key
# DEFAULT_FROM_EMAIL = env('DEFAULT_FROM_EMAIL')

# OTP configuration
EXPIRY_TIME = 600

# Rate Configuration
DEFAULT_RATE_VALUE = 4.5

# Content model provider configuration
CONTENT_MODEL_PROVIDER = [
    'service',
    'product'
]

# Configuration ExponentPushToken
EXPO_PUSH_TOKEN_REQUIRED = True
EXPO_PUSH_TOKEN_MAX_LENGTH = 255
EXPO_PUSH_TOKEN_MIN_LENGTH = 6

# A Django library which interfaces with python-phonenumbers to validate,
# pretty print and convert phone numbers. python-phonenumbers is a port of
# Google’s lib phonenumber library, which powers Android’s phone number handling.
PHONENUMBER_DEFAULT_REGION = 'SA'
DEFAULT_CURRENCY = _('SA')
KSA_DEFAULT_TAX = 15

# Configuration for Care System Invoices
CARE_COMPANY_NAME = "شركة اهتمام"
CARE_VAT_NUMBER = env('CARE_VAT_NUMBER')

# Configuration for Care System Provider
CARE_PAYMENT_ID = env('AlRAJHI_ID')
CARE_PAYMENT_PASSWORD = env('AlRAJHI_PASSWORD')
CARE_PAYMENT_RESOURCE = env('AlRAJHI_RESOURCE')
CARE_PAYMENT_CURRENCYCODE = env('AlRAJHI_CURRENCYCODE')
CARE_PAYMENT_IV = env('AlRAJHI_IV')
CARE_DEFAULT_DISCOUNT_VALUE = 100.0
CARE_BACK_CASH_VALUE = 0.01

# This variable is used to determine the time period for accepting the payment
# through Al Rajhi Gate
PAYMENT_GATEWAY_TIME_FACTOR = 60

# Tamara API
# When you sign up for a merchant account, you will be provided with an API token and Notification token.
# You authenticate with our API by providing the appropriate API token in the request Authorization header.
TAMARA_API_TOKEN = env('TAMARA_API_TOKEN')